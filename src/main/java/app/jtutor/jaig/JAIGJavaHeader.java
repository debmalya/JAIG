package app.jtutor.jaig;

import java.io.File;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class JAIGJavaHeader implements JAIGHeaderValidator {
    public static JAIGJavaHeader INSTANCE = new JAIGJavaHeader();

    @Override
    public boolean validate(File originalFile, List<String> originalLines, List<String> revisedLines) {
        if (!hasHeader(originalLines)) {
            System.out.println("    No JAIG header found in " + originalFile.getPath());
            return false;
        }
        String responseName = getResponseName(revisedLines);
        String promptName = responseName.replace("-response", "");
        return originalFile.getPath().contains(promptName);
    }

    public static class JAIGParseHeaderException extends RuntimeException {
        public JAIGParseHeaderException(String message) {
            super(message);
        }
    }

    public String generate(String responsePath) {
        // extract filename without extension
        Path responseFileName = Path.of(responsePath).getFileName(); // e.g. "prompt-response.txt"
        String responseFileNameWithoutExtension = responseFileName.toString().replace(".txt", "");
        String date = new SimpleDateFormat("HH:mm dd.MM.yyyy").format(new Date());
        return "/***\n" +
                "***   This file is generated by JAIG at "+date+"\n" +
                "***   As a result of parsing GPT response \n"+
                "***   "+responseFileNameWithoutExtension+"\n" +
                "***/";
    }

    public boolean hasHeader(List<String> lines) {
        return startsWith(lines.get(0), "/***");
    }
    
    private String getResponseName(List<String> lines) throws JAIGParseHeaderException {
        String line4 = lines.get(3);
        if (!startsWith(line4, "***")) {
            throw new JAIGParseHeaderException("Line 4 does not start with ***");
        }
        return line4.substring("***   ".length());
    }
    
    private boolean startsWith(String line, String prefix) {
        return line.startsWith(prefix);
    }
}
